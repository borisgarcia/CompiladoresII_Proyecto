/*Statements*/
gen_Code(ASTNode)
{
    return true;
}

gen_Code(Program)
{
    std::ostringstream ss; 
    ss << identHandler.genVarNames()
       << identHandler.genStrNames()
       << "\n; Array Declaration\n\n";

    for(auto arr : arrays )
        ss << arr.first << " times " << arr.second << " dd 0\n";
    FnDec * temp;
    nodeList *lst = static_cast<nodeList *>(dec_list);
    while (lst != nullptr) 
    {
        ASTNode *curr = lst->node;
        curr->gen_Code(identHandler);
        ss << curr->code <<"\n";
        lst = lst->next;
    }

    code = ss.str();
    return true;
}

gen_Code(NextIntStmt)
{
    std::cerr << "Line: "<< expr->getLinenum() << ": error: expression result unused!" << std::endl;
    return false;
}
gen_Code(ReadStmt)
{
    std::cerr << "Line: "<< this->getLinenum() << ": error: expression result unused!" << std::endl;
    exit(0);
}

gen_Code(FunctionCallStmt)
{
    FuncDef * fd = identHandler.getFuncDef(id);
    if(fd == nullptr)
    {
        std::cerr<<"\n";
        exit(1);
    }
    nodeList *args = static_cast<nodeList *>(param_list);
    int argcount = 0;

    std::ostringstream ss;
    std::list<std::string> argscode;

    while (args != nullptr) {
        ASTNode *argn = args->node;

        if (!argn->gen_Code(identHandler))
            return false;

        if(argn->getKind() == NumExpr_kind)
            argscode.push_front("push " + argn->place);
        else
            argscode.push_front("push dword [" + argn->place + "]");
        ss << argn->code << '\n';
        argcount++;
        args = args->next;
    }
    if (fd->getParamCount() != argcount) {
        std::cerr << "Line " <<  ":Error: Invalid number of arguments in call"
                  << "to function '" << id << "'.  Expected " << fd->getParamCount() << ", found " 
                  << argcount << '\n';
        return false;   
    }
    for (const auto& s : argscode) {
        ss << s << '\n';
    }
    place = identHandler.newTemp();
    ss << "call " << id << '\n'
           << "add esp, " << (argcount * 4) << '\n'
           << "mov dword [" << place << "], eax";

    code = ss.str();
    return true;
}

gen_Code(ContinueStmt)
{
    
}

gen_Code(BreakStmt)
{
    
}

gen_Code(AssignStmt) 
{
    if(!lhs->gen_Code(identHandler))
        return false;
    if(!rhs->gen_Code(identHandler))
        return false;
    
    std::ostringstream ss;
    ss << rhs->code << "\n";
    if(lhs->isA(IdArrayExpr_kind))
    {
        ss << "mov edx, " << getPlace(rhs) << "\n"
           << lhs->code << "\n"
           << "mov dword [" << lhs->place <<"], edx\n";
    }
    else
    {
        ss << "mov eax, " << getPlace(rhs) << "\n"
           << "mov dword [" << lhs->place << "], eax";
    }
    code = ss.str();
    return true;
}

gen_Code(FnDec)
{
    if(!block->gen_Code(identHandler))
        return false;
    std::ostringstream ss;
    identHandler.setCurrentFuncDef(name);
    FuncDef *fd = identHandler.getFuncDef(name);

    ss << name << ":\n"
       << "push ebp\n"
       << "mov ebp, esp\n"
       << "sub esp, " << fd->getVarSize() << "\n"
       << block->code
       << fd->getEpilogLabel() << ":\n"
       << "add esp, " << fd->getVarSize() << "\n"
       << "leave\n"
       << "ret";
    
    code = ss.str();
    identHandler.setCurrentFuncDef("");
    return true;
}

gen_Code(BlockStmt)
{
    std::ostringstream ss;
    nodeList *lista = static_cast<nodeList *>(stmt_list);
    while(lista != nullptr)
    {
        if(!lista->node->gen_Code(identHandler))
            return false;
        if(lista->node->isA(NextIntStmt_kind))
            std::cerr<<"Line: "<<lista->node->getLinenum()<<" -> warning: expression result unused\n";
        if(lista->node->isA(ReadStmt_kind))
        {
            std::cerr<<"Line: "<<lista->node->getLinenum()<<" -> Error: System.in.read value result unused\n";
            exit(1);
        }
        ss << lista->node->code <<"\n";
        lista = lista->next;
        
    }
    code = ss.str();
    return true;
}

gen_Code(PrintlnStmt)
{
    if (!expr->gen_Code(identHandler))
        return false;
    
    int argsize = 0;
    std::ostringstream ss, ss_2;

    if (expr->isA(StringConstantExpr_kind))
        ss_2 << "%s";
    else if (expr->isA(CharExpr_kind))
        ss_2 << "%c";
    else
        ss_2 << "%d";
    ss << expr->code << '\n'
       << "push " << getPlace(expr) << "\n";
    std::string strfmtplace = identHandler.registerStrLiteral(ss_2.str());
    ss << "push " << strfmtplace << '\n'
       << "call printf \n"
       << "add esp, " << (argsize + 4) << "\n";
    
    code = ss.str();
    return true;
}

gen_Code(PrintStmt)
{
    if (!expr->gen_Code(identHandler))
        return false;
    
    int argsize = 0;
    std::ostringstream ss, ss_2;

    if (expr->isA(StringConstantExpr_kind))
        ss_2 << "%s";
    else if (expr->isA(CharExpr_kind))
        ss_2 << "%c";
    else
        ss_2 << "%d";
    ss << expr->code << '\n'
       << "push " << getPlace(expr) << "\n";
    std::string strfmtplace = identHandler.registerStrLiteral(ss_2.str());
    ss << "push " << strfmtplace << '\n'
       << "call printf \n"
       << "add esp, " << (argsize + 4) << "\n";
    
    code = ss.str();
    return true;
}

gen_Code(ReturnStmt) 
{
    if (!expr->gen_Code(identHandler) && expr == nullptr)
        return false;
    
    std::ostringstream ss;

    FuncDef *fd = identHandler.getCurrentFuncDef();
    
    ss << expr->code << '\n';
    //if()
    ss << "mov eax, " << getPlace(expr) << "\n";
    ss << "jmp " << fd->getEpilogLabel();
    code = ss.str();
    return true;
}

gen_Code(IfStmt) 
{
    if (!cond->gen_Code(identHandler)) {
        return false;
    }
    if (!true_block->gen_Code(identHandler)) {
        return false;
    }
    if (false_block != nullptr) {
        if (!false_block->gen_Code(identHandler)) {
            return false;
        }
    }
    std::ostringstream ss;
    std::string lblelse = identHandler.genNewLabel();
    std::string lblendif = identHandler.genNewLabel();
    ss << cond->code << '\n'
        << "cmp " << getPlace(cond) << ", 0\n"
        << "je " << lblelse << '\n'
        << true_block->code << '\n'
        << "jmp " << lblendif << '\n'
        << lblelse << ":\n";

    if (true_block != nullptr)
        ss << false_block->code << '\n';
    ss << lblendif << ':';

    code = ss.str();
    return true;
}

gen_Code(ForStmt)
{
  if(!for_dec->gen_Code(identHandler))
    return false;
  if(!cond->gen_Code(identHandler))
    return false;
  if(!for_assign->gen_Code(identHandler))
    return false;
  if(!block->gen_Code(identHandler))
    return false;

  std::ostringstream ss;
  std::string beg = identHandler.genNewLabel();
  std::string end = identHandler.genNewLabel();

  ss<<for_dec->code<<"\n" 
    <<beg<<":\n"
    <<cond->code<<"\n" 
    <<"mov eax, "<<getPlace(cond)<<"\n"
    <<"cmp eax, 0\n"
    <<"je "<<end<<"\n"
    <<block->code<<"\n"
    <<for_assign->code<<"\n"
    <<"jmp "<<beg<<"\n"
    <<end<<":\n";
  
  code = ss.str();
  return true;
  
}

gen_Code(WhileStmt)
{
    if(!cond->gen_Code(identHandler))
        return false;
    if(!block->gen_Code(identHandler))
        return false;
    
    std::ostringstream ss;
    std::string beg = identHandler.genNewLabel();
    std::string end = identHandler.genNewLabel();
    
    ss<<beg<<":\n"
      <<cond->code<<"\n" 
      <<"mov eax, "<<getPlace(cond)<<"\n"
      <<"cmp eax, 0\n"
      <<"je "<<end<<"\n"
      <<block->code<<"\n"
      <<"jmp "<<beg<<"\n"
      <<end<<":\n";
  
    code = ss.str();
    return true;
}

/*Expresiones*/

gen_Code(FunctionCallExpr)
{
    return true;
}

gen_Code(IdExpr)
{
    int Offset = identHandler.getVarOffset(id);
    if (Offset == -1) {
        std::cerr << "Line: " << getLinenum() << ":Error:Var '" << this->place << "' not found\n";
        return false;
    }
    if(Offset == 0)
        place = id;
    else if(Offset > 0)
        place = "ebp + " + std::to_string(Offset);
    else
        place = "ebp - " + std::to_string(-Offset);
    return true;
}

gen_Code(BoolExpr)
{
    place = std::to_string(value);
    return true;
}

gen_Code(IdArrayExpr)
{
    if(!pos->gen_Code(identHandler))
        return false;

    if(arrays.find(id) == arrays.end())
        std::cerr <<"Line:"<<getLinenum()<<":"<<id <<" no existe\n";
    place = id;
    std::ostringstream ss;
    ss << pos->code <<"\n"
       <<"mov ecx, "<<getPlace(pos) <<"\n";
    place = id+"+ecx*4";
    code = ss.str();
    return true;
}

gen_Code(StringConstantExpr)
{
    place = identHandler.registerStrLiteral(value);
    return true;
}

gen_Code(NumExpr) 
{
    place = std::to_string(value);
    return true;    
}

gen_Code(PrintExpr)
{
    std::cerr << "error: can't assign void to expr" << std::endl;
    exit(0);
    return false;
}

gen_Code(ReadExpr)
{
    std::ostringstream ss;  
    ss << "push %d\n"
       << "call scanf\n"
       << "add esp, 8\n";
    code = ss.str();
    return true;
}

gen_Code(NextIntExpr)
{
    if (!expr->gen_Code(identHandler))
        return false;
    
    std::ostringstream ss;
     ss << "mov eax, 0\n"
        << "push eax\n"
        << "call time\n"
        << "add esp, 4\n"
        << "push eax\n"
        << "call srand\n"
        << "add esp, 4\n"
        << "call rand\n"
        << "mov ecx, " << getPlace(expr) << "\n"
        << "cdq\n"
        << "add ecx, 1\n"
        << "idiv ecx\n"
        << "mov eax, edx\n";
    
    code = ss.str();
    return true;
} 

gen_Code(AddExpr) 
{
    if (!expr1->gen_Code(identHandler))
        return false;
    if (!expr2->gen_Code(identHandler))
        return false;
    std::ostringstream ss;

    place = identHandler.newTemp();
    std::cout<<"PLACE : "<<place<<"\n";
    ss << expr1->code << "\n"
       << expr2->code << "\n"
       << "mov eax, " << getPlace(expr1) << "\n"
       << "add eax, " << getPlace(expr2) << "\n"
       << "mov dword [" << place << "], eax";
    code = ss.str();
    return true;
}

gen_Code(AndExpr) 
{
    if (!expr1->gen_Code(identHandler)) 
        return false;
    if (!expr2->gen_Code(identHandler)) 
        return false;
    std::ostringstream ss;

    place = identHandler.newTemp();
    ss << expr1->code << "\n"
       << expr2->code << "\n"
       << "mov eax, " << getPlace(expr1) << "\n"
       << "and eax, " << getPlace(expr2) << "\n"
       << "mov dword [" << place << "], eax";
    code = ss.str();
    return true;
}

gen_Code(Or_Expr)
 {
    if (!expr1->gen_Code(identHandler)) {
        return false;
    }
    if (!expr2->gen_Code(identHandler)) {
        return false;
    }
    std::ostringstream ss;

    place = identHandler.newTemp();
    ss << expr1->code << "\n"
       << expr2->code << "\n"
       << "mov eax, " << getPlace(expr1) << "\n"
       << "or eax, " << getPlace(expr2) << "\n"
       << "mov dword [" << place << "], eax";
    code = ss.str();
    return true;
}

gen_Code(SRLExpr)
{
    if (!expr1->gen_Code(identHandler)) {
        return false;
    }
    if (!expr2->gen_Code(identHandler)) {
        return false;
    }
    std::ostringstream ss;

    place = identHandler.newTemp();
    ss << expr1->code << "\n"
       << expr2->code << "\n"
       << "mov eax, " << getPlace(expr1) << "\n"
       << "sar eax, " << getPlace(expr2) << "\n"
       << "mov dword [" << place << "], eax";
    code = ss.str();
    return true;
}

gen_Code(SLLExpr)
{
    if (!expr1->gen_Code(identHandler)) {
        return false;
    }
    if (!expr2->gen_Code(identHandler)) {
        return false;
    }
    std::ostringstream ss;

    place = identHandler.newTemp();
    
    ss << expr1->code << "\n"
       << expr2->code << "\n"
       << "mov eax, " << getPlace(expr1) << "\n"
       << "sal eax, " << getPlace(expr2) << "\n"
       << "mov dword [" << place << "], eax";
    code = ss.str();
    return true;
}

gen_Code(SubExpr) 
{
    if (!expr1->gen_Code(identHandler))
        return false;
    if (!expr2->gen_Code(identHandler))
        return false;
    std::ostringstream ss;

    place = identHandler.newTemp();
    std::cout<<"PLACE : "<<place<<"\n";
    ss << expr1->code << "\n"
       << expr2->code << "\n"
       << "mov eax, " << getPlace(expr1) << "\n"
       << "sub eax, " << getPlace(expr2) << "\n"
       << "mov dword [" << place << "], eax";
    code = ss.str();
    return true;
}

gen_Code(MulExpr) 
{
    if (!expr1->gen_Code(identHandler))
        return false;
    if (!expr2->gen_Code(identHandler))
        return false;

    std::ostringstream ss;

    place = identHandler.newTemp();
    std::cout<<"PLACE : "<<place<<"\n";
    ss << expr1->code << "\n"
       << expr2->code << "\n"
       << "mov eax, " << getPlace(expr1) << "\n"
       << "imul eax, " << getPlace(expr2) << "\n"
       << "mov dword [" << place << "], eax" << "\n";
    code = ss.str();
    return true;
}

gen_Code(DivExpr) 
{
    if (!expr1->gen_Code(identHandler))
        return false;
    if (!expr2->gen_Code(identHandler)) 
        return false;
    std::ostringstream ss;

    place = identHandler.newTemp();
    std::cout<<"PLACE : "<<place<<"\n";
    ss << expr1->code << "\n"
       << expr2->code << "\n"
       << "mov eax, " << getPlace(expr1) << "\n"
       << "mov ebx, " << getPlace(expr2) << "\n"
       << "cdq\n"
       << "idiv ebx\n"
       << "mov dword [" << place << "], eax";
    code = ss.str();
    return true;
}

gen_Code(ModExpr) 
{
    if (!expr1->gen_Code(identHandler))
        return false;
    if (!expr2->gen_Code(identHandler)) 
        return false;
    std::ostringstream ss;

    place = identHandler.newTemp();
    std::cout<<"PLACE : "<<place<<"\n";
    ss << expr1->code << "\n"
       << expr2->code << "\n"
       << "mov eax, " << getPlace(expr1) << "\n"
       << "mov ebx, " << getPlace(expr2) << "\n"
       << "cdq\n"
       << "idiv ebx\n"
       << "mov dword [" << place << "], edx";
    code = ss.str();
    return true;
}

gen_Code(LesExpr)
{
    if (!expr1->gen_Code(identHandler))
        return false;
    if (!expr2->gen_Code(identHandler)) 
        return false;
    place = identHandler.newTemp();

    std::ostringstream ss;

    place = identHandler.newTemp();
    std::string label = identHandler.genNewLabel();
    std::string fin = identHandler.genNewLabel();

    ss << expr1->code << "\n"
        << expr2->code << "\n"
        << "mov eax, " << getPlace(expr1) << "\n"
        << "cmp eax, " << getPlace(expr2) << "\n"
        << "jl " << label <<"\n"
        << "mov eax, 0\n"
        << "jmp " << fin <<"\n"
        << label << ":\n"
        << "mov eax, 1\n"
        << fin << ":\n"
        << "mov dword [" << place << "], eax";
    code = ss.str();
    return true;
}

gen_Code(GreExpr)
{
     if (!expr1->gen_Code(identHandler))
        return false;
    if (!expr2->gen_Code(identHandler)) 
        return false;
    place = identHandler.newTemp();

    std::ostringstream ss;

    place = identHandler.newTemp();
    std::string label = identHandler.genNewLabel();
    std::string fin = identHandler.genNewLabel();

    ss << expr1->code << "\n"
        << expr2->code << "\n"
        << "mov eax, " << getPlace(expr1) << "\n"
        << "cmp eax, " << getPlace(expr2) << "\n"
        << "jg " << label <<"\n"
        << "mov eax, 0\n"
        << "jmp " << fin <<"\n"
        << label << ":\n"
        << "mov eax, 1\n"
        << fin << ":\n"
        << "mov dword [" << place << "], eax";
    code = ss.str();
    return true;
}

gen_Code(LeEExpr)
{
    if (!expr1->gen_Code(identHandler))
        return false;
    if (!expr2->gen_Code(identHandler)) 
        return false;
    place = identHandler.newTemp();

    std::ostringstream ss;

    place = identHandler.newTemp();
    std::string label = identHandler.genNewLabel();
    std::string fin = identHandler.genNewLabel();

    ss << expr1->code << "\n"
        << expr2->code << "\n"
        << "mov eax, " << getPlace(expr1) << "\n"
        << "cmp eax, " << getPlace(expr2) << "\n"
        << "jle " << label <<"\n"
        << "mov eax, 0\n"
        << "jmp " << fin <<"\n"
        << label << ":\n"
        << "mov eax, 1\n"
        << fin << ":\n"
        << "mov dword [" << place << "], eax";
    code = ss.str();
    return true;
}

gen_Code(GrEExpr)
{
     if (!expr1->gen_Code(identHandler))
        return false;
    if (!expr2->gen_Code(identHandler)) 
        return false;
    place = identHandler.newTemp();

    std::ostringstream ss;

    place = identHandler.newTemp();
    std::string label = identHandler.genNewLabel();
    std::string fin = identHandler.genNewLabel();

    ss << expr1->code << "\n"
        << expr2->code << "\n"
        << "mov eax, " << getPlace(expr1) << "\n"
        << "cmp eax, " << getPlace(expr2) << "\n"
        << "jge " << label <<"\n"
        << "mov eax, 0\n"
        << "jmp " << fin <<"\n"
        << label << ":\n"
        << "mov eax, 1\n"
        << fin << ":\n"
        << "mov dword [" << place << "], eax";
    code = ss.str();
    return true;
}

gen_Code(EquExpr)
{
    if (!expr1->gen_Code(identHandler))
        return false;
    if (!expr2->gen_Code(identHandler)) 
        return false;
    place = identHandler.newTemp();

    std::ostringstream ss;

    place = identHandler.newTemp();
    std::string label = identHandler.genNewLabel();
    std::string fin = identHandler.genNewLabel();

    ss << expr1->code << "\n"
        << expr2->code << "\n"
        << "mov eax, " << getPlace(expr1) << "\n"
        << "cmp eax, " << getPlace(expr2) << "\n"
        << "je " << label <<"\n"
        << "mov eax, 0\n"
        << "jmp " << fin <<"\n"
        << label << ":\n"
        << "mov eax, 1\n"
        << fin << ":\n"
        << "mov dword [" << place << "], eax";
    code = ss.str();
    return true;
}

gen_Code(NEqExpr)
{
   if (!expr1->gen_Code(identHandler))
        return false;
    if (!expr2->gen_Code(identHandler)) 
        return false;
    place = identHandler.newTemp();

    std::ostringstream ss;

    place = identHandler.newTemp();
    std::string label = identHandler.genNewLabel();
    std::string fin = identHandler.genNewLabel();

    ss << expr1->code << "\n"
        << expr2->code << "\n"
        << "mov eax, " << getPlace(expr1) << "\n"
        << "cmp eax, " << getPlace(expr2) << "\n"
        << "jne " << label <<"\n"
        << "mov eax, 0\n"
        << "jmp " << fin <<"\n"
        << label << ":\n"
        << "mov eax, 1\n"
        << fin << ":\n"
        << "mov dword [" << place << "], eax";
    code = ss.str();
    return true;
}

gen_Code(NegExpr) 
{
    if (!expr->gen_Code(identHandler))
        return false;
    place = identHandler.newTemp();
    std::ostringstream ss;

    ss << expr->code << "\n";
    if(expr->getKind() == NumExpr_kind)
        expr->place = "-" + expr->place;
    else
    {
        ss << "mov eax, dword [" << expr->place << "]\n";
        ss << "neg eax\n";
        ss << "mov dword [" << place << "], eax";
    }

    code = ss.str();
    return true;
}

gen_Code(NotExpr)
{
    if(!expr->gen_Code(identHandler))
        return false;
    
    std::string lbl = identHandler.genNewLabel();
    std::string lbl_end = identHandler.genNewLabel();

    std::ostringstream ss;
    place = identHandler.newTemp();

    ss << expr->code << "\n"
       << "mov eax, " << getPlace(expr) << "\n"
       << "cmp eax, 0 \n"
       << "je " << lbl << "\n"
       << "mov eax , 0 \n"
       << "jmp " << lbl_end << "\n"
       << lbl <<":\n"
       << "mov eax , 1 \n"
       << lbl_end << ":\n"
       << "mov dword [" << place << "], eax\n";
    code = ss.str();
    return true;

}
