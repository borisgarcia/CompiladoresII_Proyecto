Func_Decl(ASTNode) {
    return true;
}

Func_Decl(Program) {
    nodeList *lst = static_cast<nodeList *>(dec_list);

    while (lst != nullptr) {
        ASTNode *fd = lst->node;

        if (!fd->Func_Decl(identHandler)) {
            return false;
        }
        lst = lst->next;
    }
    return true;
}

Func_Decl(FnDec) 
{
    if (identHandler.findFunc(name)) {
        std::cerr << "Line: " << this->getLinenum() << ": Function '" << name << "' already declared\n";
        return false;
    }
    UPFuncDef funcDef = std::make_unique<FuncDef>(name,type);
    FnParamsDec * temp;
    nodeList *lst = static_cast<nodeList *>(params);
    while (lst != nullptr) {
        ASTNode *fd = lst->node;
        temp = static_cast<FnParamsDec *>(fd);
        funcDef->registerParam(temp->id);
        lst = lst->next;
    }
    identHandler.registerFuncDef(std::move(funcDef));
    identHandler.setCurrentFuncDef(name);
    if (!block->Func_Decl(identHandler))
        return false;
    identHandler.setCurrentFuncDef("");
    return true;
}

Func_Decl(VarDecStmt)
{
    stringNode * temp;
    ArrayDec * temp_2;
    nodeList *lst = static_cast<nodeList *>(list);
        
    while (lst != nullptr) {
        ASTNode *curr = lst->node;
        if(curr->isA(stringNode_kind))
        {
            temp = static_cast<stringNode *>(curr);
            identHandler.registerVar(temp->id, -1);
        }
        else if(curr->isA(ArrayDec_kind))
        {
            temp_2 = static_cast<ArrayDec *>(curr);
            arrays.insert({temp_2->id,temp_2->size});
        }
        lst = lst->next;
    }
    return true;
}

Func_Decl(FieldDecStmt)
{
    int val;
    if(value == nullptr)
        identHandler.registerVar(id, -1);
    else
    {
        if(type == "int")
            val = static_cast<NumExpr*>(value)->value;
        else if(type == "int")
            val = static_cast<CharExpr*>(value)->value;
        else if(type == "int")
            val = static_cast<BoolExpr*>(value)->value;
        identHandler.registerVar(id, val);
    }
    return true;
}

Func_Decl(FieldDecStmt_2)
{
    stringNode * temp;
    ArrayDec * temp_2;
    nodeList *lst = static_cast<nodeList *>(list);
    while (lst != nullptr) {
        ASTNode *curr = lst->node;

        if(curr->isA(stringNode_kind))
        {
            temp = static_cast<stringNode *>(curr);
            identHandler.registerVar(temp->id, -1);
        }
        else if(curr->isA(ArrayDec_kind))
        {
            temp_2 = static_cast<ArrayDec *>(curr);
            arrays.insert({temp_2->id,temp_2->size});
        }
        lst = lst->next;
    }
    return true;
}

Func_Decl(BlockStmt){
    nodeList *lst = static_cast<nodeList *>(stmt_list);
    while (lst != nullptr) 
    {
        ASTNode *curr = lst->node;
        if(!curr->Func_Decl(identHandler))
            return false;
        lst = lst->next;
    }
    return true;
}

Func_Decl(IfStmt){
    if(!true_block->Func_Decl(identHandler))
        return false;
    if(false_block != nullptr && !false_block->Func_Decl(identHandler))
        return false;
    return true;
}

Func_Decl(ForStmt){
    if(!block->Func_Decl(identHandler))
        return false;
    return true;
}

Func_Decl(WhileStmt){
    if(!block->Func_Decl(identHandler))
        return false;
    return true;
}